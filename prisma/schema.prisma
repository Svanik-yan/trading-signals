generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            Role      @default(USER)
  
  accounts        Account[]
  sessions        Session[]
  followedTraders UserFollowsTrader[]
  followedStrategies UserFollowsStrategy[]
  tradingSettings TradingSettings?
  trader          Trader?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trader {
  id               String    @id @default(cuid())
  userId           String    @unique
  bio              String?   @db.Text
  experienceYears  Int?
  specialties      String[]
  riskLevel        RiskLevel @default(MODERATE)
  performanceScore Float?
  isVerified       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategies       Strategy[]
  signals          Signal[]
  followers        UserFollowsTrader[]
}

model Strategy {
  id              String           @id @default(cuid())
  name            String
  description     String           @db.Text
  traderId        String
  type            StrategyType
  riskLevel       RiskLevel        @default(MODERATE)
  profitability   Float?
  drawdown        Float?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  trader          Trader           @relation(fields: [traderId], references: [id])
  signals         Signal[]
  followers       UserFollowsStrategy[]
  settings        StrategySettings?
}

model StrategySettings {
  id              String    @id @default(cuid())
  strategyId      String    @unique
  leverageMin     Int       @default(1)
  leverageMax     Int       @default(10)
  stopLoss        Float?
  takeProfit      Float?
  tradingPairs    String[]
  timeframe       Timeframe @default(DAILY)
  customParams    Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  strategy        Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}

model Signal {
  id              String       @id @default(cuid())
  traderId        String
  strategyId      String?
  pair            String
  direction       Direction
  entryPrice      Float
  targetPrice     Float?
  stopLossPrice   Float?
  leverage        Int          @default(1)
  timeframe       Timeframe    @default(DAILY)
  confidence      Int?         @db.SmallInt // 1-10 confidence score
  notes           String?      @db.Text
  status          SignalStatus @default(ACTIVE)
  closedPrice     Float?
  profitPercentage Float?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  trader          Trader       @relation(fields: [traderId], references: [id])
  strategy        Strategy?    @relation(fields: [strategyId], references: [id])
}

model TradingSettings {
  id            String  @id @default(cuid())
  userId        String  @unique
  capitalAmount Float?
  riskPerTrade  Float?  // percentage of capital to risk per trade
  maxOpenTrades Int     @default(5)
  autoTrade     Boolean @default(false)
  defaultLeverage Int   @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserFollowsTrader {
  id              String    @id @default(cuid())
  userId          String
  traderId        String
  allocation      Float?    // percentage of capital allocated
  copySettings    Boolean   @default(true)
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  trader          Trader    @relation(fields: [traderId], references: [id], onDelete: Cascade)
  
  @@unique([userId, traderId])
}

model UserFollowsStrategy {
  id              String    @id @default(cuid())
  userId          String
  strategyId      String
  allocation      Float?    // percentage of capital allocated
  customLeverage  Int?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategy        Strategy  @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, strategyId])
}

enum Role {
  USER
  TRADER
  ADMIN
}

enum RiskLevel {
  CONSERVATIVE
  MODERATE
  AGGRESSIVE
  VERY_AGGRESSIVE
}

enum StrategyType {
  MARTINGALE
  GRID_TRADING
  TREND_FOLLOWING
  BREAKOUT
  MEAN_REVERSION
  ARBITRAGE
  CUSTOM
}

enum Direction {
  LONG
  SHORT
}

enum SignalStatus {
  ACTIVE
  CLOSED_WIN
  CLOSED_LOSS
  CANCELLED
}

enum Timeframe {
  M1
  M5
  M15
  M30
  H1
  H4
  DAILY
  WEEKLY
  MONTHLY
} 